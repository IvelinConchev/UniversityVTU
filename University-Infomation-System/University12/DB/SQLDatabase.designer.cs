#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace University12.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="University 1234")]
	public partial class SQLDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertDepartmentLecture(DepartmentLecture instance);
    partial void UpdateDepartmentLecture(DepartmentLecture instance);
    partial void DeleteDepartmentLecture(DepartmentLecture instance);
    partial void InsertEvaluation(Evaluation instance);
    partial void UpdateEvaluation(Evaluation instance);
    partial void DeleteEvaluation(Evaluation instance);
    partial void InsertFormOfEducation(FormOfEducation instance);
    partial void UpdateFormOfEducation(FormOfEducation instance);
    partial void DeleteFormOfEducation(FormOfEducation instance);
    partial void InsertInterruptedRepeat(InterruptedRepeat instance);
    partial void UpdateInterruptedRepeat(InterruptedRepeat instance);
    partial void DeleteInterruptedRepeat(InterruptedRepeat instance);
    partial void InsertSpeciality(Speciality instance);
    partial void UpdateSpeciality(Speciality instance);
    partial void DeleteSpeciality(Speciality instance);
    partial void InsertSpecialityFaculty(SpecialityFaculty instance);
    partial void UpdateSpecialityFaculty(SpecialityFaculty instance);
    partial void DeleteSpecialityFaculty(SpecialityFaculty instance);
    partial void InsertSubjectSpeciality(SubjectSpeciality instance);
    partial void UpdateSubjectSpeciality(SubjectSpeciality instance);
    partial void DeleteSubjectSpeciality(SubjectSpeciality instance);
    partial void InsertUniversity(University instance);
    partial void UpdateUniversity(University instance);
    partial void DeleteUniversity(University instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertЕducationaLevel(ЕducationaLevel instance);
    partial void UpdateЕducationaLevel(ЕducationaLevel instance);
    partial void DeleteЕducationaLevel(ЕducationaLevel instance);
    partial void InsertSemester(Semester instance);
    partial void UpdateSemester(Semester instance);
    partial void DeleteSemester(Semester instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSubjectCourse(SubjectCourse instance);
    partial void UpdateSubjectCourse(SubjectCourse instance);
    partial void DeleteSubjectCourse(SubjectCourse instance);
    partial void InsertStudentCourse(StudentCourse instance);
    partial void UpdateStudentCourse(StudentCourse instance);
    partial void DeleteStudentCourse(StudentCourse instance);
    partial void InsertFaculty(Faculty instance);
    partial void UpdateFaculty(Faculty instance);
    partial void DeleteFaculty(Faculty instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertLecture(Lecture instance);
    partial void UpdateLecture(Lecture instance);
    partial void DeleteLecture(Lecture instance);
    partial void InsertStudentSpeciality(StudentSpeciality instance);
    partial void UpdateStudentSpeciality(StudentSpeciality instance);
    partial void DeleteStudentSpeciality(StudentSpeciality instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public SQLDatabaseDataContext() : 
				base(global::University12.Properties.Settings.Default.University_1234ConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<dvStudent> dvStudents
		{
			get
			{
				return this.GetTable<dvStudent>();
			}
		}
		
		public System.Data.Linq.Table<dvStudentEvaluation> dvStudentEvaluations
		{
			get
			{
				return this.GetTable<dvStudentEvaluation>();
			}
		}
		
		public System.Data.Linq.Table<dvStudentInfo> dvStudentInfos
		{
			get
			{
				return this.GetTable<dvStudentInfo>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentLecture> DepartmentLectures
		{
			get
			{
				return this.GetTable<DepartmentLecture>();
			}
		}
		
		public System.Data.Linq.Table<Evaluation> Evaluations
		{
			get
			{
				return this.GetTable<Evaluation>();
			}
		}
		
		public System.Data.Linq.Table<FormOfEducation> FormOfEducations
		{
			get
			{
				return this.GetTable<FormOfEducation>();
			}
		}
		
		public System.Data.Linq.Table<InterruptedRepeat> InterruptedRepeats
		{
			get
			{
				return this.GetTable<InterruptedRepeat>();
			}
		}
		
		public System.Data.Linq.Table<Speciality> Specialities
		{
			get
			{
				return this.GetTable<Speciality>();
			}
		}
		
		public System.Data.Linq.Table<SpecialityFaculty> SpecialityFaculties
		{
			get
			{
				return this.GetTable<SpecialityFaculty>();
			}
		}
		
		public System.Data.Linq.Table<SubjectSpeciality> SubjectSpecialities
		{
			get
			{
				return this.GetTable<SubjectSpeciality>();
			}
		}
		
		public System.Data.Linq.Table<University> Universities
		{
			get
			{
				return this.GetTable<University>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<ЕducationaLevel> ЕducationaLevels
		{
			get
			{
				return this.GetTable<ЕducationaLevel>();
			}
		}
		
		public System.Data.Linq.Table<Semester> Semesters
		{
			get
			{
				return this.GetTable<Semester>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<SubjectCourse> SubjectCourses
		{
			get
			{
				return this.GetTable<SubjectCourse>();
			}
		}
		
		public System.Data.Linq.Table<StudentCourse> StudentCourses
		{
			get
			{
				return this.GetTable<StudentCourse>();
			}
		}
		
		public System.Data.Linq.Table<Faculty> Faculties
		{
			get
			{
				return this.GetTable<Faculty>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<Lecture> Lectures
		{
			get
			{
				return this.GetTable<Lecture>();
			}
		}
		
		public System.Data.Linq.Table<StudentSpeciality> StudentSpecialities
		{
			get
			{
				return this.GetTable<StudentSpeciality>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spStudentsInsert")]
		public int spStudentsInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="NVarChar(255)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MiddleName", DbType="NVarChar(255)")] string middleName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="NVarChar(255)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EGN", DbType="NVarChar(255)")] string eGN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NameSpeciality", DbType="NVarChar(255)")] string nameSpeciality, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NameCourse", DbType="NVarChar(255)")] string nameCourse, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartYear", DbType="DateTime")] System.Nullable<System.DateTime> startYear, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FinishYear", DbType="DateTime")] System.Nullable<System.DateTime> finishYear, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FormOfEducationID", DbType="Int")] System.Nullable<int> formOfEducationID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FacultyName", DbType="NVarChar(255)")] string facultyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SpecialityID", DbType="Int")] System.Nullable<int> specialityID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FacultyNumber", DbType="Int")] System.Nullable<int> facultyNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firstName, middleName, lastName, eGN, nameSpeciality, nameCourse, startYear, finishYear, formOfEducationID, facultyName, specialityID, facultyNumber);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnStudentsFullInformationStr", IsComposable=true)]
		public IQueryable<fnStudentsFullInformationStrResult> fnStudentsFullInformationStr([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StudentFirstName", DbType="NVarChar(255)")] string studentFirstName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string egn)
		{
			return this.CreateMethodCallQuery<fnStudentsFullInformationStrResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentFirstName, egn);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnStudentsFullInformation", IsComposable=true)]
		public IQueryable<fnStudentsFullInformationResult> fnStudentsFullInformation([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string egn)
		{
			return this.CreateMethodCallQuery<fnStudentsFullInformationResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), egn);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnStudentEvaliuation", IsComposable=true)]
		public IQueryable<fnStudentEvaliuationResult> fnStudentEvaliuation([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> name)
		{
			return this.CreateMethodCallQuery<fnStudentEvaliuationResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dvStudent")]
	public partial class dvStudent
	{
		
		private int _StudentID;
		
		private string _StudentFirstName;
		
		private string _StudentMiddleName;
		
		private string _StudentlastName;
		
		private string _NameSpeciality;
		
		private string _FormOfEducationName;
		
		private string _EGN;
		
		public dvStudent()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this._StudentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentFirstName", DbType="NVarChar(255)")]
		public string StudentFirstName
		{
			get
			{
				return this._StudentFirstName;
			}
			set
			{
				if ((this._StudentFirstName != value))
				{
					this._StudentFirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentMiddleName", DbType="NVarChar(255)")]
		public string StudentMiddleName
		{
			get
			{
				return this._StudentMiddleName;
			}
			set
			{
				if ((this._StudentMiddleName != value))
				{
					this._StudentMiddleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentlastName", DbType="NVarChar(255)")]
		public string StudentlastName
		{
			get
			{
				return this._StudentlastName;
			}
			set
			{
				if ((this._StudentlastName != value))
				{
					this._StudentlastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameSpeciality", DbType="NVarChar(255)")]
		public string NameSpeciality
		{
			get
			{
				return this._NameSpeciality;
			}
			set
			{
				if ((this._NameSpeciality != value))
				{
					this._NameSpeciality = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormOfEducationName", DbType="NVarChar(255)")]
		public string FormOfEducationName
		{
			get
			{
				return this._FormOfEducationName;
			}
			set
			{
				if ((this._FormOfEducationName != value))
				{
					this._FormOfEducationName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EGN", DbType="NVarChar(255)")]
		public string EGN
		{
			get
			{
				return this._EGN;
			}
			set
			{
				if ((this._EGN != value))
				{
					this._EGN = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dvStudentEvaluation")]
	public partial class dvStudentEvaluation
	{
		
		private int _StudentID;
		
		private string _StudentFirstName;
		
		private string _StudentMiddleName;
		
		private string _StudentlastName;
		
		private string _NameSpeciality;
		
		private string _SubjectName;
		
		private System.Nullable<int> _StudentNumber;
		
		private string _LectureFirstName;
		
		private string _LectureLastName;
		
		private string _LectureTitle;
		
		public dvStudentEvaluation()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this._StudentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentFirstName", DbType="NVarChar(255)")]
		public string StudentFirstName
		{
			get
			{
				return this._StudentFirstName;
			}
			set
			{
				if ((this._StudentFirstName != value))
				{
					this._StudentFirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentMiddleName", DbType="NVarChar(255)")]
		public string StudentMiddleName
		{
			get
			{
				return this._StudentMiddleName;
			}
			set
			{
				if ((this._StudentMiddleName != value))
				{
					this._StudentMiddleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentlastName", DbType="NVarChar(255)")]
		public string StudentlastName
		{
			get
			{
				return this._StudentlastName;
			}
			set
			{
				if ((this._StudentlastName != value))
				{
					this._StudentlastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameSpeciality", DbType="NVarChar(255)")]
		public string NameSpeciality
		{
			get
			{
				return this._NameSpeciality;
			}
			set
			{
				if ((this._NameSpeciality != value))
				{
					this._NameSpeciality = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(255)")]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this._SubjectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentNumber", DbType="Int")]
		public System.Nullable<int> StudentNumber
		{
			get
			{
				return this._StudentNumber;
			}
			set
			{
				if ((this._StudentNumber != value))
				{
					this._StudentNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectureFirstName", DbType="NVarChar(255)")]
		public string LectureFirstName
		{
			get
			{
				return this._LectureFirstName;
			}
			set
			{
				if ((this._LectureFirstName != value))
				{
					this._LectureFirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectureLastName", DbType="NVarChar(255)")]
		public string LectureLastName
		{
			get
			{
				return this._LectureLastName;
			}
			set
			{
				if ((this._LectureLastName != value))
				{
					this._LectureLastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectureTitle", DbType="NVarChar(255)")]
		public string LectureTitle
		{
			get
			{
				return this._LectureTitle;
			}
			set
			{
				if ((this._LectureTitle != value))
				{
					this._LectureTitle = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dvStudentInfo")]
	public partial class dvStudentInfo
	{
		
		private int _StudentID;
		
		private string _StudentFirstName;
		
		private string _StudentMiddleName;
		
		private string _StudentLastName;
		
		private string _NameSpeciality;
		
		private int _CourseID;
		
		private string _NameCourse;
		
		private int _FacultyID;
		
		private string _FacultyName;
		
		private System.Nullable<System.DateTime> _StudentStartYear;
		
		private System.Nullable<System.DateTime> _StudentFinishYear;
		
		private string _StudentSubjectName;
		
		private int _LectureID;
		
		private string _LectureFirstName;
		
		private string _LectrureLastName;
		
		private string _LectureTitle;
		
		private System.Nullable<System.DateTime> _RepeastYear;
		
		private System.Nullable<int> _StudentEvaluation;
		
		public dvStudentInfo()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this._StudentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentFirstName", DbType="NVarChar(255)")]
		public string StudentFirstName
		{
			get
			{
				return this._StudentFirstName;
			}
			set
			{
				if ((this._StudentFirstName != value))
				{
					this._StudentFirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentMiddleName", DbType="NVarChar(255)")]
		public string StudentMiddleName
		{
			get
			{
				return this._StudentMiddleName;
			}
			set
			{
				if ((this._StudentMiddleName != value))
				{
					this._StudentMiddleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentLastName", DbType="NVarChar(255)")]
		public string StudentLastName
		{
			get
			{
				return this._StudentLastName;
			}
			set
			{
				if ((this._StudentLastName != value))
				{
					this._StudentLastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameSpeciality", DbType="NVarChar(255)")]
		public string NameSpeciality
		{
			get
			{
				return this._NameSpeciality;
			}
			set
			{
				if ((this._NameSpeciality != value))
				{
					this._NameSpeciality = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL")]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this._CourseID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCourse", DbType="NVarChar(255)")]
		public string NameCourse
		{
			get
			{
				return this._NameCourse;
			}
			set
			{
				if ((this._NameCourse != value))
				{
					this._NameCourse = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int NOT NULL")]
		public int FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					this._FacultyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyName", DbType="NVarChar(255)")]
		public string FacultyName
		{
			get
			{
				return this._FacultyName;
			}
			set
			{
				if ((this._FacultyName != value))
				{
					this._FacultyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentStartYear", DbType="DateTime")]
		public System.Nullable<System.DateTime> StudentStartYear
		{
			get
			{
				return this._StudentStartYear;
			}
			set
			{
				if ((this._StudentStartYear != value))
				{
					this._StudentStartYear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentFinishYear", DbType="DateTime")]
		public System.Nullable<System.DateTime> StudentFinishYear
		{
			get
			{
				return this._StudentFinishYear;
			}
			set
			{
				if ((this._StudentFinishYear != value))
				{
					this._StudentFinishYear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentSubjectName", DbType="NVarChar(255)")]
		public string StudentSubjectName
		{
			get
			{
				return this._StudentSubjectName;
			}
			set
			{
				if ((this._StudentSubjectName != value))
				{
					this._StudentSubjectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectureID", DbType="Int NOT NULL")]
		public int LectureID
		{
			get
			{
				return this._LectureID;
			}
			set
			{
				if ((this._LectureID != value))
				{
					this._LectureID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectureFirstName", DbType="NVarChar(255)")]
		public string LectureFirstName
		{
			get
			{
				return this._LectureFirstName;
			}
			set
			{
				if ((this._LectureFirstName != value))
				{
					this._LectureFirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectrureLastName", DbType="NVarChar(255)")]
		public string LectrureLastName
		{
			get
			{
				return this._LectrureLastName;
			}
			set
			{
				if ((this._LectrureLastName != value))
				{
					this._LectrureLastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectureTitle", DbType="NVarChar(255)")]
		public string LectureTitle
		{
			get
			{
				return this._LectureTitle;
			}
			set
			{
				if ((this._LectureTitle != value))
				{
					this._LectureTitle = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepeastYear", DbType="Date")]
		public System.Nullable<System.DateTime> RepeastYear
		{
			get
			{
				return this._RepeastYear;
			}
			set
			{
				if ((this._RepeastYear != value))
				{
					this._RepeastYear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentEvaluation", DbType="Int")]
		public System.Nullable<int> StudentEvaluation
		{
			get
			{
				return this._StudentEvaluation;
			}
			set
			{
				if ((this._StudentEvaluation != value))
				{
					this._StudentEvaluation = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NameCourse;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<InterruptedRepeat> _InterruptedRepeats;
		
		private EntitySet<SubjectCourse> _SubjectCourses;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
		private EntitySet<StudentSpeciality> _StudentSpecialities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameCourseChanging(string value);
    partial void OnNameCourseChanged();
    #endregion
		
		public Course()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._InterruptedRepeats = new EntitySet<InterruptedRepeat>(new Action<InterruptedRepeat>(this.attach_InterruptedRepeats), new Action<InterruptedRepeat>(this.detach_InterruptedRepeats));
			this._SubjectCourses = new EntitySet<SubjectCourse>(new Action<SubjectCourse>(this.attach_SubjectCourses), new Action<SubjectCourse>(this.detach_SubjectCourses));
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			this._StudentSpecialities = new EntitySet<StudentSpeciality>(new Action<StudentSpeciality>(this.attach_StudentSpecialities), new Action<StudentSpeciality>(this.detach_StudentSpecialities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCourse", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string NameCourse
		{
			get
			{
				return this._NameCourse;
			}
			set
			{
				if ((this._NameCourse != value))
				{
					this.OnNameCourseChanging(value);
					this.SendPropertyChanging();
					this._NameCourse = value;
					this.SendPropertyChanged("NameCourse");
					this.OnNameCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Evaluation", Storage="_Evaluations", ThisKey="ID", OtherKey="CourseID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_InterruptedRepeat", Storage="_InterruptedRepeats", ThisKey="ID", OtherKey="CourseID")]
		public EntitySet<InterruptedRepeat> InterruptedRepeats
		{
			get
			{
				return this._InterruptedRepeats;
			}
			set
			{
				this._InterruptedRepeats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_SubjectCourse", Storage="_SubjectCourses", ThisKey="ID", OtherKey="CourseiD")]
		public EntitySet<SubjectCourse> SubjectCourses
		{
			get
			{
				return this._SubjectCourses;
			}
			set
			{
				this._SubjectCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentCourse", Storage="_StudentCourses", ThisKey="ID", OtherKey="CourseID")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentSpeciality", Storage="_StudentSpecialities", ThisKey="ID", OtherKey="CourseID")]
		public EntitySet<StudentSpeciality> StudentSpecialities
		{
			get
			{
				return this._StudentSpecialities;
			}
			set
			{
				this._StudentSpecialities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_InterruptedRepeats(InterruptedRepeat entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_InterruptedRepeats(InterruptedRepeat entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_SubjectCourses(SubjectCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_SubjectCourses(SubjectCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DepartmentLecture")]
	public partial class DepartmentLecture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LectureID;
		
		private int _DepartmentID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _FinishDate;
		
		private int _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Lecture> _Lecture;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLectureIDChanging(int value);
    partial void OnLectureIDChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnFinishDateChanging(System.DateTime value);
    partial void OnFinishDateChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public DepartmentLecture()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Lecture = default(EntityRef<Lecture>);
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectureID", DbType="Int NOT NULL")]
		public int LectureID
		{
			get
			{
				return this._LectureID;
			}
			set
			{
				if ((this._LectureID != value))
				{
					if (this._Lecture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLectureIDChanging(value);
					this.SendPropertyChanging();
					this._LectureID = value;
					this.SendPropertyChanged("LectureID");
					this.OnLectureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishDate", DbType="DateTime NOT NULL")]
		public System.DateTime FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_DepartmentLecture", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.DepartmentLectures.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.DepartmentLectures.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_DepartmentLecture", Storage="_Lecture", ThisKey="LectureID", OtherKey="ID", IsForeignKey=true)]
		public Lecture Lecture
		{
			get
			{
				return this._Lecture.Entity;
			}
			set
			{
				Lecture previousValue = this._Lecture.Entity;
				if (((previousValue != value) 
							|| (this._Lecture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecture.Entity = null;
						previousValue.DepartmentLectures.Remove(this);
					}
					this._Lecture.Entity = value;
					if ((value != null))
					{
						value.DepartmentLectures.Add(this);
						this._LectureID = value.ID;
					}
					else
					{
						this._LectureID = default(int);
					}
					this.SendPropertyChanged("Lecture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_DepartmentLecture", Storage="_Department", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.DepartmentLectures.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.DepartmentLectures.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluation")]
	public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SubjectID;
		
		private int _StudentID;
		
		private int _SpecialityID;
		
		private int _LectureID;
		
		private int _Number;
		
		private int _CourseID;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Lecture> _Lecture;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnSpecialityIDChanging(int value);
    partial void OnSpecialityIDChanged();
    partial void OnLectureIDChanging(int value);
    partial void OnLectureIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    #endregion
		
		public Evaluation()
		{
			this._Course = default(EntityRef<Course>);
			this._Speciality = default(EntityRef<Speciality>);
			this._Subject = default(EntityRef<Subject>);
			this._Lecture = default(EntityRef<Lecture>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityID", DbType="Int NOT NULL")]
		public int SpecialityID
		{
			get
			{
				return this._SpecialityID;
			}
			set
			{
				if ((this._SpecialityID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialityID = value;
					this.SendPropertyChanged("SpecialityID");
					this.OnSpecialityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LectureID", DbType="Int NOT NULL")]
		public int LectureID
		{
			get
			{
				return this._LectureID;
			}
			set
			{
				if ((this._LectureID != value))
				{
					if (this._Lecture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLectureIDChanging(value);
					this.SendPropertyChanging();
					this._LectureID = value;
					this.SendPropertyChanged("LectureID");
					this.OnLectureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL")]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Evaluation", Storage="_Course", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._CourseID = value.ID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Evaluation", Storage="_Speciality", ThisKey="SpecialityID", OtherKey="ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._SpecialityID = value.ID;
					}
					else
					{
						this._SpecialityID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Evaluation", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Evaluation", Storage="_Lecture", ThisKey="LectureID", OtherKey="ID", IsForeignKey=true)]
		public Lecture Lecture
		{
			get
			{
				return this._Lecture.Entity;
			}
			set
			{
				Lecture previousValue = this._Lecture.Entity;
				if (((previousValue != value) 
							|| (this._Lecture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecture.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Lecture.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._LectureID = value.ID;
					}
					else
					{
						this._LectureID = default(int);
					}
					this.SendPropertyChanged("Lecture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Evaluation", Storage="_Student", ThisKey="StudentID", OtherKey="ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._StudentID = value.ID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FormOfEducation")]
	public partial class FormOfEducation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<StudentSpeciality> _StudentSpecialities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FormOfEducation()
		{
			this._StudentSpecialities = new EntitySet<StudentSpeciality>(new Action<StudentSpeciality>(this.attach_StudentSpecialities), new Action<StudentSpeciality>(this.detach_StudentSpecialities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormOfEducation_StudentSpeciality", Storage="_StudentSpecialities", ThisKey="ID", OtherKey="FormOfEducationID")]
		public EntitySet<StudentSpeciality> StudentSpecialities
		{
			get
			{
				return this._StudentSpecialities;
			}
			set
			{
				this._StudentSpecialities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.FormOfEducation = this;
		}
		
		private void detach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.FormOfEducation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InterruptedRepeat")]
	public partial class InterruptedRepeat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _RepeastYear;
		
		private int _StudentID;
		
		private int _SpecialityID;
		
		private int _CourseID;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRepeastYearChanging(System.Nullable<System.DateTime> value);
    partial void OnRepeastYearChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnSpecialityIDChanging(int value);
    partial void OnSpecialityIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    #endregion
		
		public InterruptedRepeat()
		{
			this._Course = default(EntityRef<Course>);
			this._Speciality = default(EntityRef<Speciality>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepeastYear", DbType="Date")]
		public System.Nullable<System.DateTime> RepeastYear
		{
			get
			{
				return this._RepeastYear;
			}
			set
			{
				if ((this._RepeastYear != value))
				{
					this.OnRepeastYearChanging(value);
					this.SendPropertyChanging();
					this._RepeastYear = value;
					this.SendPropertyChanged("RepeastYear");
					this.OnRepeastYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityID", DbType="Int NOT NULL")]
		public int SpecialityID
		{
			get
			{
				return this._SpecialityID;
			}
			set
			{
				if ((this._SpecialityID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialityID = value;
					this.SendPropertyChanged("SpecialityID");
					this.OnSpecialityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL")]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_InterruptedRepeat", Storage="_Course", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.InterruptedRepeats.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.InterruptedRepeats.Add(this);
						this._CourseID = value.ID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_InterruptedRepeat", Storage="_Speciality", ThisKey="SpecialityID", OtherKey="ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.InterruptedRepeats.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.InterruptedRepeats.Add(this);
						this._SpecialityID = value.ID;
					}
					else
					{
						this._SpecialityID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_InterruptedRepeat", Storage="_Student", ThisKey="StudentID", OtherKey="ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.InterruptedRepeats.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.InterruptedRepeats.Add(this);
						this._StudentID = value.ID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Speciality")]
	public partial class Speciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NameSpeciality;
		
		private int _FacultyID;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<InterruptedRepeat> _InterruptedRepeats;
		
		private EntitySet<SpecialityFaculty> _SpecialityFaculties;
		
		private EntitySet<SubjectSpeciality> _SubjectSpecialities;
		
		private EntitySet<SubjectCourse> _SubjectCourses;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
		private EntitySet<StudentSpeciality> _StudentSpecialities;
		
		private EntityRef<Faculty> _Faculty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameSpecialityChanging(string value);
    partial void OnNameSpecialityChanged();
    partial void OnFacultyIDChanging(int value);
    partial void OnFacultyIDChanged();
    #endregion
		
		public Speciality()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._InterruptedRepeats = new EntitySet<InterruptedRepeat>(new Action<InterruptedRepeat>(this.attach_InterruptedRepeats), new Action<InterruptedRepeat>(this.detach_InterruptedRepeats));
			this._SpecialityFaculties = new EntitySet<SpecialityFaculty>(new Action<SpecialityFaculty>(this.attach_SpecialityFaculties), new Action<SpecialityFaculty>(this.detach_SpecialityFaculties));
			this._SubjectSpecialities = new EntitySet<SubjectSpeciality>(new Action<SubjectSpeciality>(this.attach_SubjectSpecialities), new Action<SubjectSpeciality>(this.detach_SubjectSpecialities));
			this._SubjectCourses = new EntitySet<SubjectCourse>(new Action<SubjectCourse>(this.attach_SubjectCourses), new Action<SubjectCourse>(this.detach_SubjectCourses));
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			this._StudentSpecialities = new EntitySet<StudentSpeciality>(new Action<StudentSpeciality>(this.attach_StudentSpecialities), new Action<StudentSpeciality>(this.detach_StudentSpecialities));
			this._Faculty = default(EntityRef<Faculty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameSpeciality", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string NameSpeciality
		{
			get
			{
				return this._NameSpeciality;
			}
			set
			{
				if ((this._NameSpeciality != value))
				{
					this.OnNameSpecialityChanging(value);
					this.SendPropertyChanging();
					this._NameSpeciality = value;
					this.SendPropertyChanged("NameSpeciality");
					this.OnNameSpecialityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int NOT NULL")]
		public int FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Evaluation", Storage="_Evaluations", ThisKey="ID", OtherKey="SpecialityID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_InterruptedRepeat", Storage="_InterruptedRepeats", ThisKey="ID", OtherKey="SpecialityID")]
		public EntitySet<InterruptedRepeat> InterruptedRepeats
		{
			get
			{
				return this._InterruptedRepeats;
			}
			set
			{
				this._InterruptedRepeats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_SpecialityFaculty", Storage="_SpecialityFaculties", ThisKey="ID", OtherKey="SpecialityID")]
		public EntitySet<SpecialityFaculty> SpecialityFaculties
		{
			get
			{
				return this._SpecialityFaculties;
			}
			set
			{
				this._SpecialityFaculties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_SubjectSpeciality", Storage="_SubjectSpecialities", ThisKey="ID", OtherKey="SpecialityID")]
		public EntitySet<SubjectSpeciality> SubjectSpecialities
		{
			get
			{
				return this._SubjectSpecialities;
			}
			set
			{
				this._SubjectSpecialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_SubjectCourse", Storage="_SubjectCourses", ThisKey="ID", OtherKey="SpecialityID")]
		public EntitySet<SubjectCourse> SubjectCourses
		{
			get
			{
				return this._SubjectCourses;
			}
			set
			{
				this._SubjectCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_StudentCourse", Storage="_StudentCourses", ThisKey="ID", OtherKey="SpecialityID")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_StudentSpeciality", Storage="_StudentSpecialities", ThisKey="ID", OtherKey="SpecialityID")]
		public EntitySet<StudentSpeciality> StudentSpecialities
		{
			get
			{
				return this._StudentSpecialities;
			}
			set
			{
				this._StudentSpecialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Speciality", Storage="_Faculty", ThisKey="FacultyID", OtherKey="ID", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Specialities.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Specialities.Add(this);
						this._FacultyID = value.ID;
					}
					else
					{
						this._FacultyID = default(int);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_InterruptedRepeats(InterruptedRepeat entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_InterruptedRepeats(InterruptedRepeat entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_SpecialityFaculties(SpecialityFaculty entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_SpecialityFaculties(SpecialityFaculty entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_SubjectSpecialities(SubjectSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_SubjectSpecialities(SubjectSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_SubjectCourses(SubjectCourse entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_SubjectCourses(SubjectCourse entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecialityFaculty")]
	public partial class SpecialityFaculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SpecialityID;
		
		private int _FacultyID;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<Faculty> _Faculty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSpecialityIDChanging(int value);
    partial void OnSpecialityIDChanged();
    partial void OnFacultyIDChanging(int value);
    partial void OnFacultyIDChanged();
    #endregion
		
		public SpecialityFaculty()
		{
			this._Speciality = default(EntityRef<Speciality>);
			this._Faculty = default(EntityRef<Faculty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityID", DbType="Int NOT NULL")]
		public int SpecialityID
		{
			get
			{
				return this._SpecialityID;
			}
			set
			{
				if ((this._SpecialityID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialityID = value;
					this.SendPropertyChanged("SpecialityID");
					this.OnSpecialityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int NOT NULL")]
		public int FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_SpecialityFaculty", Storage="_Speciality", ThisKey="SpecialityID", OtherKey="ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.SpecialityFaculties.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.SpecialityFaculties.Add(this);
						this._SpecialityID = value.ID;
					}
					else
					{
						this._SpecialityID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_SpecialityFaculty", Storage="_Faculty", ThisKey="FacultyID", OtherKey="ID", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.SpecialityFaculties.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.SpecialityFaculties.Add(this);
						this._FacultyID = value.ID;
					}
					else
					{
						this._FacultyID = default(int);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectSpeciality")]
	public partial class SubjectSpeciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SubjectID;
		
		private int _SpecialityID;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnSpecialityIDChanging(int value);
    partial void OnSpecialityIDChanged();
    #endregion
		
		public SubjectSpeciality()
		{
			this._Speciality = default(EntityRef<Speciality>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityID", DbType="Int NOT NULL")]
		public int SpecialityID
		{
			get
			{
				return this._SpecialityID;
			}
			set
			{
				if ((this._SpecialityID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialityID = value;
					this.SendPropertyChanged("SpecialityID");
					this.OnSpecialityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_SubjectSpeciality", Storage="_Speciality", ThisKey="SpecialityID", OtherKey="ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.SubjectSpecialities.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.SubjectSpecialities.Add(this);
						this._SpecialityID = value.ID;
					}
					else
					{
						this._SpecialityID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectSpeciality", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.SubjectSpecialities.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.SubjectSpecialities.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.University")]
	public partial class University : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _City;
		
		private string _Name;
		
		private EntitySet<Faculty> _Faculties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public University()
		{
			this._Faculties = new EntitySet<Faculty>(new Action<Faculty>(this.attach_Faculties), new Action<Faculty>(this.detach_Faculties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="University_Faculty", Storage="_Faculties", ThisKey="ID", OtherKey="UniversityID")]
		public EntitySet<Faculty> Faculties
		{
			get
			{
				return this._Faculties;
			}
			set
			{
				this._Faculties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.University = this;
		}
		
		private void detach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.University = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SubjectName;
		
		private int _DepartmentsID;
		
		private int _FacultyID;
		
		private bool _CompulsoryDiscipline;
		
		private bool _FacultativeDiscipline;
		
		private EntitySet<DepartmentLecture> _DepartmentLectures;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<SubjectSpeciality> _SubjectSpecialities;
		
		private EntitySet<SubjectCourse> _SubjectCourses;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
		private EntityRef<Faculty> _Faculty;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    partial void OnDepartmentsIDChanging(int value);
    partial void OnDepartmentsIDChanged();
    partial void OnFacultyIDChanging(int value);
    partial void OnFacultyIDChanged();
    partial void OnCompulsoryDisciplineChanging(bool value);
    partial void OnCompulsoryDisciplineChanged();
    partial void OnFacultativeDisciplineChanging(bool value);
    partial void OnFacultativeDisciplineChanged();
    #endregion
		
		public Subject()
		{
			this._DepartmentLectures = new EntitySet<DepartmentLecture>(new Action<DepartmentLecture>(this.attach_DepartmentLectures), new Action<DepartmentLecture>(this.detach_DepartmentLectures));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._SubjectSpecialities = new EntitySet<SubjectSpeciality>(new Action<SubjectSpeciality>(this.attach_SubjectSpecialities), new Action<SubjectSpeciality>(this.detach_SubjectSpecialities));
			this._SubjectCourses = new EntitySet<SubjectCourse>(new Action<SubjectCourse>(this.attach_SubjectCourses), new Action<SubjectCourse>(this.detach_SubjectCourses));
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			this._Faculty = default(EntityRef<Faculty>);
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentsID", DbType="Int NOT NULL")]
		public int DepartmentsID
		{
			get
			{
				return this._DepartmentsID;
			}
			set
			{
				if ((this._DepartmentsID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentsIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentsID = value;
					this.SendPropertyChanged("DepartmentsID");
					this.OnDepartmentsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int NOT NULL")]
		public int FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompulsoryDiscipline", DbType="Bit NOT NULL")]
		public bool CompulsoryDiscipline
		{
			get
			{
				return this._CompulsoryDiscipline;
			}
			set
			{
				if ((this._CompulsoryDiscipline != value))
				{
					this.OnCompulsoryDisciplineChanging(value);
					this.SendPropertyChanging();
					this._CompulsoryDiscipline = value;
					this.SendPropertyChanged("CompulsoryDiscipline");
					this.OnCompulsoryDisciplineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultativeDiscipline", DbType="Bit NOT NULL")]
		public bool FacultativeDiscipline
		{
			get
			{
				return this._FacultativeDiscipline;
			}
			set
			{
				if ((this._FacultativeDiscipline != value))
				{
					this.OnFacultativeDisciplineChanging(value);
					this.SendPropertyChanging();
					this._FacultativeDiscipline = value;
					this.SendPropertyChanged("FacultativeDiscipline");
					this.OnFacultativeDisciplineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_DepartmentLecture", Storage="_DepartmentLectures", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<DepartmentLecture> DepartmentLectures
		{
			get
			{
				return this._DepartmentLectures;
			}
			set
			{
				this._DepartmentLectures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Evaluation", Storage="_Evaluations", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectSpeciality", Storage="_SubjectSpecialities", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<SubjectSpeciality> SubjectSpecialities
		{
			get
			{
				return this._SubjectSpecialities;
			}
			set
			{
				this._SubjectSpecialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectCourse", Storage="_SubjectCourses", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<SubjectCourse> SubjectCourses
		{
			get
			{
				return this._SubjectCourses;
			}
			set
			{
				this._SubjectCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_StudentCourse", Storage="_StudentCourses", ThisKey="ID", OtherKey="SubjectsID")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Subject", Storage="_Faculty", ThisKey="FacultyID", OtherKey="ID", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._FacultyID = value.ID;
					}
					else
					{
						this._FacultyID = default(int);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Subject", Storage="_Department", ThisKey="DepartmentsID", OtherKey="ID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._DepartmentsID = value.ID;
					}
					else
					{
						this._DepartmentsID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DepartmentLectures(DepartmentLecture entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_DepartmentLectures(DepartmentLecture entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_SubjectSpecialities(SubjectSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_SubjectSpecialities(SubjectSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_SubjectCourses(SubjectCourse entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_SubjectCourses(SubjectCourse entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ЕducationaLevel")]
	public partial class ЕducationaLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _LevelName;
		
		private EntitySet<Faculty> _Faculties;
		
		private EntitySet<StudentSpeciality> _StudentSpecialities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLevelNameChanging(string value);
    partial void OnLevelNameChanged();
    #endregion
		
		public ЕducationaLevel()
		{
			this._Faculties = new EntitySet<Faculty>(new Action<Faculty>(this.attach_Faculties), new Action<Faculty>(this.detach_Faculties));
			this._StudentSpecialities = new EntitySet<StudentSpeciality>(new Action<StudentSpeciality>(this.attach_StudentSpecialities), new Action<StudentSpeciality>(this.detach_StudentSpecialities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LevelName
		{
			get
			{
				return this._LevelName;
			}
			set
			{
				if ((this._LevelName != value))
				{
					this.OnLevelNameChanging(value);
					this.SendPropertyChanging();
					this._LevelName = value;
					this.SendPropertyChanged("LevelName");
					this.OnLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ЕducationaLevel_Faculty", Storage="_Faculties", ThisKey="ID", OtherKey="EducationLevelID")]
		public EntitySet<Faculty> Faculties
		{
			get
			{
				return this._Faculties;
			}
			set
			{
				this._Faculties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ЕducationaLevel_StudentSpeciality", Storage="_StudentSpecialities", ThisKey="ID", OtherKey="EducationLevelID")]
		public EntitySet<StudentSpeciality> StudentSpecialities
		{
			get
			{
				return this._StudentSpecialities;
			}
			set
			{
				this._StudentSpecialities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.ЕducationaLevel = this;
		}
		
		private void detach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.ЕducationaLevel = null;
		}
		
		private void attach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.ЕducationaLevel = this;
		}
		
		private void detach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.ЕducationaLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Semester")]
	public partial class Semester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SummerWinter;
		
		private EntitySet<SubjectCourse> _SubjectCourses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSummerWinterChanging(string value);
    partial void OnSummerWinterChanged();
    #endregion
		
		public Semester()
		{
			this._SubjectCourses = new EntitySet<SubjectCourse>(new Action<SubjectCourse>(this.attach_SubjectCourses), new Action<SubjectCourse>(this.detach_SubjectCourses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SummerWinter", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SummerWinter
		{
			get
			{
				return this._SummerWinter;
			}
			set
			{
				if ((this._SummerWinter != value))
				{
					this.OnSummerWinterChanging(value);
					this.SendPropertyChanging();
					this._SummerWinter = value;
					this.SendPropertyChanged("SummerWinter");
					this.OnSummerWinterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_SubjectCourse", Storage="_SubjectCourses", ThisKey="ID", OtherKey="SemesterID")]
		public EntitySet<SubjectCourse> SubjectCourses
		{
			get
			{
				return this._SubjectCourses;
			}
			set
			{
				this._SubjectCourses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubjectCourses(SubjectCourse entity)
		{
			this.SendPropertyChanging();
			entity.Semester = this;
		}
		
		private void detach_SubjectCourses(SubjectCourse entity)
		{
			this.SendPropertyChanging();
			entity.Semester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _Phone;
		
		private string _Email;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(int value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Int NOT NULL")]
		public int Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private bool _Delete;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDeleteChanging(bool value);
    partial void OnDeleteChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Delete]", Storage="_Delete", DbType="Bit NOT NULL")]
		public bool Delete
		{
			get
			{
				return this._Delete;
			}
			set
			{
				if ((this._Delete != value))
				{
					this.OnDeleteChanging(value);
					this.SendPropertyChanging();
					this._Delete = value;
					this.SendPropertyChanged("Delete");
					this.OnDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectCourse")]
	public partial class SubjectCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SubjectID;
		
		private int _CourseiD;
		
		private int _SemesterID;
		
		private int _SpecialityID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Semester> _Semester;
		
		private EntityRef<Speciality> _Speciality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnCourseiDChanging(int value);
    partial void OnCourseiDChanged();
    partial void OnSemesterIDChanging(int value);
    partial void OnSemesterIDChanged();
    partial void OnSpecialityIDChanging(int value);
    partial void OnSpecialityIDChanged();
    #endregion
		
		public SubjectCourse()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Course = default(EntityRef<Course>);
			this._Semester = default(EntityRef<Semester>);
			this._Speciality = default(EntityRef<Speciality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseiD", DbType="Int NOT NULL")]
		public int CourseiD
		{
			get
			{
				return this._CourseiD;
			}
			set
			{
				if ((this._CourseiD != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseiDChanging(value);
					this.SendPropertyChanging();
					this._CourseiD = value;
					this.SendPropertyChanged("CourseiD");
					this.OnCourseiDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int NOT NULL")]
		public int SemesterID
		{
			get
			{
				return this._SemesterID;
			}
			set
			{
				if ((this._SemesterID != value))
				{
					if (this._Semester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterIDChanging(value);
					this.SendPropertyChanging();
					this._SemesterID = value;
					this.SendPropertyChanged("SemesterID");
					this.OnSemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityID", DbType="Int NOT NULL")]
		public int SpecialityID
		{
			get
			{
				return this._SpecialityID;
			}
			set
			{
				if ((this._SpecialityID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialityID = value;
					this.SendPropertyChanged("SpecialityID");
					this.OnSpecialityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectCourse", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.SubjectCourses.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.SubjectCourses.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_SubjectCourse", Storage="_Course", ThisKey="CourseiD", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.SubjectCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.SubjectCourses.Add(this);
						this._CourseiD = value.ID;
					}
					else
					{
						this._CourseiD = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_SubjectCourse", Storage="_Semester", ThisKey="SemesterID", OtherKey="ID", IsForeignKey=true)]
		public Semester Semester
		{
			get
			{
				return this._Semester.Entity;
			}
			set
			{
				Semester previousValue = this._Semester.Entity;
				if (((previousValue != value) 
							|| (this._Semester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Semester.Entity = null;
						previousValue.SubjectCourses.Remove(this);
					}
					this._Semester.Entity = value;
					if ((value != null))
					{
						value.SubjectCourses.Add(this);
						this._SemesterID = value.ID;
					}
					else
					{
						this._SemesterID = default(int);
					}
					this.SendPropertyChanged("Semester");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_SubjectCourse", Storage="_Speciality", ThisKey="SpecialityID", OtherKey="ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.SubjectCourses.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.SubjectCourses.Add(this);
						this._SpecialityID = value.ID;
					}
					else
					{
						this._SpecialityID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentCourse")]
	public partial class StudentCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudentsID;
		
		private int _CourseID;
		
		private int _SubjectsID;
		
		private int _SpecialityID;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudentsIDChanging(int value);
    partial void OnStudentsIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnSubjectsIDChanging(int value);
    partial void OnSubjectsIDChanged();
    partial void OnSpecialityIDChanging(int value);
    partial void OnSpecialityIDChanged();
    #endregion
		
		public StudentCourse()
		{
			this._Course = default(EntityRef<Course>);
			this._Subject = default(EntityRef<Subject>);
			this._Speciality = default(EntityRef<Speciality>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentsID", DbType="Int NOT NULL")]
		public int StudentsID
		{
			get
			{
				return this._StudentsID;
			}
			set
			{
				if ((this._StudentsID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentsIDChanging(value);
					this.SendPropertyChanging();
					this._StudentsID = value;
					this.SendPropertyChanged("StudentsID");
					this.OnStudentsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL")]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectsID", DbType="Int NOT NULL")]
		public int SubjectsID
		{
			get
			{
				return this._SubjectsID;
			}
			set
			{
				if ((this._SubjectsID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectsIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectsID = value;
					this.SendPropertyChanged("SubjectsID");
					this.OnSubjectsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityID", DbType="Int NOT NULL")]
		public int SpecialityID
		{
			get
			{
				return this._SpecialityID;
			}
			set
			{
				if ((this._SpecialityID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialityID = value;
					this.SendPropertyChanged("SpecialityID");
					this.OnSpecialityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentCourse", Storage="_Course", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._CourseID = value.ID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_StudentCourse", Storage="_Subject", ThisKey="SubjectsID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._SubjectsID = value.ID;
					}
					else
					{
						this._SubjectsID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_StudentCourse", Storage="_Speciality", ThisKey="SpecialityID", OtherKey="ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._SpecialityID = value.ID;
					}
					else
					{
						this._SpecialityID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentCourse", Storage="_Student", ThisKey="StudentsID", OtherKey="ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._StudentsID = value.ID;
					}
					else
					{
						this._StudentsID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faculty")]
	public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FacultyName;
		
		private int _UniversityID;
		
		private System.Nullable<int> _EducationLevelID;
		
		private System.Nullable<int> _DeanID;
		
		private EntitySet<Speciality> _Specialities;
		
		private EntitySet<SpecialityFaculty> _SpecialityFaculties;
		
		private EntitySet<Subject> _Subjects;
		
		private EntitySet<Lecture> _Lectures;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Student> _Students;
		
		private EntityRef<University> _University;
		
		private EntityRef<ЕducationaLevel> _ЕducationaLevel;
		
		private EntityRef<Lecture> _Lecture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFacultyNameChanging(string value);
    partial void OnFacultyNameChanged();
    partial void OnUniversityIDChanging(int value);
    partial void OnUniversityIDChanged();
    partial void OnEducationLevelIDChanging(System.Nullable<int> value);
    partial void OnEducationLevelIDChanged();
    partial void OnDeanIDChanging(System.Nullable<int> value);
    partial void OnDeanIDChanged();
    #endregion
		
		public Faculty()
		{
			this._Specialities = new EntitySet<Speciality>(new Action<Speciality>(this.attach_Specialities), new Action<Speciality>(this.detach_Specialities));
			this._SpecialityFaculties = new EntitySet<SpecialityFaculty>(new Action<SpecialityFaculty>(this.attach_SpecialityFaculties), new Action<SpecialityFaculty>(this.detach_SpecialityFaculties));
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			this._Lectures = new EntitySet<Lecture>(new Action<Lecture>(this.attach_Lectures), new Action<Lecture>(this.detach_Lectures));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._University = default(EntityRef<University>);
			this._ЕducationaLevel = default(EntityRef<ЕducationaLevel>);
			this._Lecture = default(EntityRef<Lecture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FacultyName
		{
			get
			{
				return this._FacultyName;
			}
			set
			{
				if ((this._FacultyName != value))
				{
					this.OnFacultyNameChanging(value);
					this.SendPropertyChanging();
					this._FacultyName = value;
					this.SendPropertyChanged("FacultyName");
					this.OnFacultyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniversityID", DbType="Int NOT NULL")]
		public int UniversityID
		{
			get
			{
				return this._UniversityID;
			}
			set
			{
				if ((this._UniversityID != value))
				{
					if (this._University.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUniversityIDChanging(value);
					this.SendPropertyChanging();
					this._UniversityID = value;
					this.SendPropertyChanged("UniversityID");
					this.OnUniversityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationLevelID", DbType="Int")]
		public System.Nullable<int> EducationLevelID
		{
			get
			{
				return this._EducationLevelID;
			}
			set
			{
				if ((this._EducationLevelID != value))
				{
					if (this._ЕducationaLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEducationLevelIDChanging(value);
					this.SendPropertyChanging();
					this._EducationLevelID = value;
					this.SendPropertyChanged("EducationLevelID");
					this.OnEducationLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeanID", DbType="Int")]
		public System.Nullable<int> DeanID
		{
			get
			{
				return this._DeanID;
			}
			set
			{
				if ((this._DeanID != value))
				{
					if (this._Lecture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeanIDChanging(value);
					this.SendPropertyChanging();
					this._DeanID = value;
					this.SendPropertyChanged("DeanID");
					this.OnDeanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Speciality", Storage="_Specialities", ThisKey="ID", OtherKey="FacultyID")]
		public EntitySet<Speciality> Specialities
		{
			get
			{
				return this._Specialities;
			}
			set
			{
				this._Specialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_SpecialityFaculty", Storage="_SpecialityFaculties", ThisKey="ID", OtherKey="FacultyID")]
		public EntitySet<SpecialityFaculty> SpecialityFaculties
		{
			get
			{
				return this._SpecialityFaculties;
			}
			set
			{
				this._SpecialityFaculties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Subject", Storage="_Subjects", ThisKey="ID", OtherKey="FacultyID")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Lecture", Storage="_Lectures", ThisKey="ID", OtherKey="FacultyID")]
		public EntitySet<Lecture> Lectures
		{
			get
			{
				return this._Lectures;
			}
			set
			{
				this._Lectures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Department", Storage="_Departments", ThisKey="ID", OtherKey="FacultyID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Student", Storage="_Students", ThisKey="ID", OtherKey="FacultyID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="University_Faculty", Storage="_University", ThisKey="UniversityID", OtherKey="ID", IsForeignKey=true)]
		public University University
		{
			get
			{
				return this._University.Entity;
			}
			set
			{
				University previousValue = this._University.Entity;
				if (((previousValue != value) 
							|| (this._University.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._University.Entity = null;
						previousValue.Faculties.Remove(this);
					}
					this._University.Entity = value;
					if ((value != null))
					{
						value.Faculties.Add(this);
						this._UniversityID = value.ID;
					}
					else
					{
						this._UniversityID = default(int);
					}
					this.SendPropertyChanged("University");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ЕducationaLevel_Faculty", Storage="_ЕducationaLevel", ThisKey="EducationLevelID", OtherKey="ID", IsForeignKey=true)]
		public ЕducationaLevel ЕducationaLevel
		{
			get
			{
				return this._ЕducationaLevel.Entity;
			}
			set
			{
				ЕducationaLevel previousValue = this._ЕducationaLevel.Entity;
				if (((previousValue != value) 
							|| (this._ЕducationaLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ЕducationaLevel.Entity = null;
						previousValue.Faculties.Remove(this);
					}
					this._ЕducationaLevel.Entity = value;
					if ((value != null))
					{
						value.Faculties.Add(this);
						this._EducationLevelID = value.ID;
					}
					else
					{
						this._EducationLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ЕducationaLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Faculty", Storage="_Lecture", ThisKey="DeanID", OtherKey="ID", IsForeignKey=true)]
		public Lecture Lecture
		{
			get
			{
				return this._Lecture.Entity;
			}
			set
			{
				Lecture previousValue = this._Lecture.Entity;
				if (((previousValue != value) 
							|| (this._Lecture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecture.Entity = null;
						previousValue.Faculties.Remove(this);
					}
					this._Lecture.Entity = value;
					if ((value != null))
					{
						value.Faculties.Add(this);
						this._DeanID = value.ID;
					}
					else
					{
						this._DeanID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lecture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Specialities(Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Specialities(Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
		
		private void attach_SpecialityFaculties(SpecialityFaculty entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_SpecialityFaculties(SpecialityFaculty entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
		
		private void attach_Lectures(Lecture entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Lectures(Lecture entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _RoleID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public UserRole()
		{
			this._User = default(EntityRef<User>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lectures")]
	public partial class Lecture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private string _Title;
		
		private int _Phone;
		
		private string _Email;
		
		private string _GraduateUniversity;
		
		private string _City;
		
		private int _DepartmentID;
		
		private int _FacultyID;
		
		private string _Image;
		
		private EntitySet<DepartmentLecture> _DepartmentLectures;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<Faculty> _Faculties;
		
		private EntitySet<Department> _Departments;
		
		private EntityRef<Faculty> _Faculty;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPhoneChanging(int value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGraduateUniversityChanging(string value);
    partial void OnGraduateUniversityChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnFacultyIDChanging(int value);
    partial void OnFacultyIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Lecture()
		{
			this._DepartmentLectures = new EntitySet<DepartmentLecture>(new Action<DepartmentLecture>(this.attach_DepartmentLectures), new Action<DepartmentLecture>(this.detach_DepartmentLectures));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Faculties = new EntitySet<Faculty>(new Action<Faculty>(this.attach_Faculties), new Action<Faculty>(this.detach_Faculties));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Faculty = default(EntityRef<Faculty>);
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Int NOT NULL")]
		public int Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraduateUniversity", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string GraduateUniversity
		{
			get
			{
				return this._GraduateUniversity;
			}
			set
			{
				if ((this._GraduateUniversity != value))
				{
					this.OnGraduateUniversityChanging(value);
					this.SendPropertyChanging();
					this._GraduateUniversity = value;
					this.SendPropertyChanged("GraduateUniversity");
					this.OnGraduateUniversityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int NOT NULL")]
		public int FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(255)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_DepartmentLecture", Storage="_DepartmentLectures", ThisKey="ID", OtherKey="LectureID")]
		public EntitySet<DepartmentLecture> DepartmentLectures
		{
			get
			{
				return this._DepartmentLectures;
			}
			set
			{
				this._DepartmentLectures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Evaluation", Storage="_Evaluations", ThisKey="ID", OtherKey="LectureID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Faculty", Storage="_Faculties", ThisKey="ID", OtherKey="DeanID")]
		public EntitySet<Faculty> Faculties
		{
			get
			{
				return this._Faculties;
			}
			set
			{
				this._Faculties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Department", Storage="_Departments", ThisKey="ID", OtherKey="HeadОfDepartmentID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Lecture", Storage="_Faculty", ThisKey="FacultyID", OtherKey="ID", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Lectures.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Lectures.Add(this);
						this._FacultyID = value.ID;
					}
					else
					{
						this._FacultyID = default(int);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Lecture", Storage="_Department", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Lectures.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Lectures.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DepartmentLectures(DepartmentLecture entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = this;
		}
		
		private void detach_DepartmentLectures(DepartmentLecture entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = null;
		}
		
		private void attach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = this;
		}
		
		private void detach_Faculties(Faculty entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Lecture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentSpeciality")]
	public partial class StudentSpeciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SpecialityID;
		
		private System.DateTime _StartYear;
		
		private System.DateTime _FinishYear;
		
		private int _CourseID;
		
		private int _FormOfEducationID;
		
		private int _StudentID;
		
		private int _FacultyNumber;
		
		private int _EducationLevelID;
		
		private int _Credits;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<FormOfEducation> _FormOfEducation;
		
		private EntityRef<ЕducationaLevel> _ЕducationaLevel;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSpecialityIDChanging(int value);
    partial void OnSpecialityIDChanged();
    partial void OnStartYearChanging(System.DateTime value);
    partial void OnStartYearChanged();
    partial void OnFinishYearChanging(System.DateTime value);
    partial void OnFinishYearChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnFormOfEducationIDChanging(int value);
    partial void OnFormOfEducationIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnFacultyNumberChanging(int value);
    partial void OnFacultyNumberChanged();
    partial void OnEducationLevelIDChanging(int value);
    partial void OnEducationLevelIDChanged();
    partial void OnCreditsChanging(int value);
    partial void OnCreditsChanged();
    #endregion
		
		public StudentSpeciality()
		{
			this._Speciality = default(EntityRef<Speciality>);
			this._Course = default(EntityRef<Course>);
			this._FormOfEducation = default(EntityRef<FormOfEducation>);
			this._ЕducationaLevel = default(EntityRef<ЕducationaLevel>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityID", DbType="Int NOT NULL")]
		public int SpecialityID
		{
			get
			{
				return this._SpecialityID;
			}
			set
			{
				if ((this._SpecialityID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialityID = value;
					this.SendPropertyChanged("SpecialityID");
					this.OnSpecialityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartYear", DbType="DateTime NOT NULL")]
		public System.DateTime StartYear
		{
			get
			{
				return this._StartYear;
			}
			set
			{
				if ((this._StartYear != value))
				{
					this.OnStartYearChanging(value);
					this.SendPropertyChanging();
					this._StartYear = value;
					this.SendPropertyChanged("StartYear");
					this.OnStartYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishYear", DbType="DateTime NOT NULL")]
		public System.DateTime FinishYear
		{
			get
			{
				return this._FinishYear;
			}
			set
			{
				if ((this._FinishYear != value))
				{
					this.OnFinishYearChanging(value);
					this.SendPropertyChanging();
					this._FinishYear = value;
					this.SendPropertyChanged("FinishYear");
					this.OnFinishYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL")]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormOfEducationID", DbType="Int NOT NULL")]
		public int FormOfEducationID
		{
			get
			{
				return this._FormOfEducationID;
			}
			set
			{
				if ((this._FormOfEducationID != value))
				{
					if (this._FormOfEducation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormOfEducationIDChanging(value);
					this.SendPropertyChanging();
					this._FormOfEducationID = value;
					this.SendPropertyChanged("FormOfEducationID");
					this.OnFormOfEducationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyNumber", DbType="Int NOT NULL")]
		public int FacultyNumber
		{
			get
			{
				return this._FacultyNumber;
			}
			set
			{
				if ((this._FacultyNumber != value))
				{
					this.OnFacultyNumberChanging(value);
					this.SendPropertyChanging();
					this._FacultyNumber = value;
					this.SendPropertyChanged("FacultyNumber");
					this.OnFacultyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationLevelID", DbType="Int NOT NULL")]
		public int EducationLevelID
		{
			get
			{
				return this._EducationLevelID;
			}
			set
			{
				if ((this._EducationLevelID != value))
				{
					if (this._ЕducationaLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEducationLevelIDChanging(value);
					this.SendPropertyChanging();
					this._EducationLevelID = value;
					this.SendPropertyChanged("EducationLevelID");
					this.OnEducationLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credits", DbType="Int NOT NULL")]
		public int Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				if ((this._Credits != value))
				{
					this.OnCreditsChanging(value);
					this.SendPropertyChanging();
					this._Credits = value;
					this.SendPropertyChanged("Credits");
					this.OnCreditsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_StudentSpeciality", Storage="_Speciality", ThisKey="SpecialityID", OtherKey="ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.StudentSpecialities.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.StudentSpecialities.Add(this);
						this._SpecialityID = value.ID;
					}
					else
					{
						this._SpecialityID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentSpeciality", Storage="_Course", ThisKey="CourseID", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.StudentSpecialities.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.StudentSpecialities.Add(this);
						this._CourseID = value.ID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormOfEducation_StudentSpeciality", Storage="_FormOfEducation", ThisKey="FormOfEducationID", OtherKey="ID", IsForeignKey=true)]
		public FormOfEducation FormOfEducation
		{
			get
			{
				return this._FormOfEducation.Entity;
			}
			set
			{
				FormOfEducation previousValue = this._FormOfEducation.Entity;
				if (((previousValue != value) 
							|| (this._FormOfEducation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormOfEducation.Entity = null;
						previousValue.StudentSpecialities.Remove(this);
					}
					this._FormOfEducation.Entity = value;
					if ((value != null))
					{
						value.StudentSpecialities.Add(this);
						this._FormOfEducationID = value.ID;
					}
					else
					{
						this._FormOfEducationID = default(int);
					}
					this.SendPropertyChanged("FormOfEducation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ЕducationaLevel_StudentSpeciality", Storage="_ЕducationaLevel", ThisKey="EducationLevelID", OtherKey="ID", IsForeignKey=true)]
		public ЕducationaLevel ЕducationaLevel
		{
			get
			{
				return this._ЕducationaLevel.Entity;
			}
			set
			{
				ЕducationaLevel previousValue = this._ЕducationaLevel.Entity;
				if (((previousValue != value) 
							|| (this._ЕducationaLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ЕducationaLevel.Entity = null;
						previousValue.StudentSpecialities.Remove(this);
					}
					this._ЕducationaLevel.Entity = value;
					if ((value != null))
					{
						value.StudentSpecialities.Add(this);
						this._EducationLevelID = value.ID;
					}
					else
					{
						this._EducationLevelID = default(int);
					}
					this.SendPropertyChanged("ЕducationaLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentSpeciality", Storage="_Student", ThisKey="StudentID", OtherKey="ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentSpecialities.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentSpecialities.Add(this);
						this._StudentID = value.ID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _FacultyID;
		
		private System.Nullable<int> _HeadОfDepartmentID;
		
		private string _Txt;
		
		private EntitySet<DepartmentLecture> _DepartmentLectures;
		
		private EntitySet<Subject> _Subjects;
		
		private EntitySet<Lecture> _Lectures;
		
		private EntityRef<Faculty> _Faculty;
		
		private EntityRef<Lecture> _Lecture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFacultyIDChanging(int value);
    partial void OnFacultyIDChanged();
    partial void OnHeadОfDepartmentIDChanging(System.Nullable<int> value);
    partial void OnHeadОfDepartmentIDChanged();
    partial void OnTxtChanging(string value);
    partial void OnTxtChanged();
    #endregion
		
		public Department()
		{
			this._DepartmentLectures = new EntitySet<DepartmentLecture>(new Action<DepartmentLecture>(this.attach_DepartmentLectures), new Action<DepartmentLecture>(this.detach_DepartmentLectures));
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			this._Lectures = new EntitySet<Lecture>(new Action<Lecture>(this.attach_Lectures), new Action<Lecture>(this.detach_Lectures));
			this._Faculty = default(EntityRef<Faculty>);
			this._Lecture = default(EntityRef<Lecture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int NOT NULL")]
		public int FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadОfDepartmentID", DbType="Int")]
		public System.Nullable<int> HeadОfDepartmentID
		{
			get
			{
				return this._HeadОfDepartmentID;
			}
			set
			{
				if ((this._HeadОfDepartmentID != value))
				{
					if (this._Lecture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeadОfDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._HeadОfDepartmentID = value;
					this.SendPropertyChanged("HeadОfDepartmentID");
					this.OnHeadОfDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Txt", DbType="NVarChar(255)")]
		public string Txt
		{
			get
			{
				return this._Txt;
			}
			set
			{
				if ((this._Txt != value))
				{
					this.OnTxtChanging(value);
					this.SendPropertyChanging();
					this._Txt = value;
					this.SendPropertyChanged("Txt");
					this.OnTxtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_DepartmentLecture", Storage="_DepartmentLectures", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<DepartmentLecture> DepartmentLectures
		{
			get
			{
				return this._DepartmentLectures;
			}
			set
			{
				this._DepartmentLectures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Subject", Storage="_Subjects", ThisKey="ID", OtherKey="DepartmentsID")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Lecture", Storage="_Lectures", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<Lecture> Lectures
		{
			get
			{
				return this._Lectures;
			}
			set
			{
				this._Lectures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Department", Storage="_Faculty", ThisKey="FacultyID", OtherKey="ID", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._FacultyID = value.ID;
					}
					else
					{
						this._FacultyID = default(int);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecture_Department", Storage="_Lecture", ThisKey="HeadОfDepartmentID", OtherKey="ID", IsForeignKey=true)]
		public Lecture Lecture
		{
			get
			{
				return this._Lecture.Entity;
			}
			set
			{
				Lecture previousValue = this._Lecture.Entity;
				if (((previousValue != value) 
							|| (this._Lecture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecture.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Lecture.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._HeadОfDepartmentID = value.ID;
					}
					else
					{
						this._HeadОfDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lecture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DepartmentLectures(DepartmentLecture entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_DepartmentLectures(DepartmentLecture entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Lectures(Lecture entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Lectures(Lecture entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _EGN;
		
		private int _Phone;
		
		private string _Email;
		
		private string _City;
		
		private string _GraduateSecondarySchool;
		
		private System.DateTime _DateOfEnrollmentInFirstCourse;
		
		private int _Male;
		
		private string _Address;
		
		private string _Image;
		
		private System.Nullable<int> _FacultyID;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<InterruptedRepeat> _InterruptedRepeats;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
		private EntitySet<StudentSpeciality> _StudentSpecialities;
		
		private EntityRef<Faculty> _Faculty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEGNChanging(string value);
    partial void OnEGNChanged();
    partial void OnPhoneChanging(int value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnGraduateSecondarySchoolChanging(string value);
    partial void OnGraduateSecondarySchoolChanged();
    partial void OnDateOfEnrollmentInFirstCourseChanging(System.DateTime value);
    partial void OnDateOfEnrollmentInFirstCourseChanged();
    partial void OnMaleChanging(int value);
    partial void OnMaleChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnFacultyIDChanging(System.Nullable<int> value);
    partial void OnFacultyIDChanged();
    #endregion
		
		public Student()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._InterruptedRepeats = new EntitySet<InterruptedRepeat>(new Action<InterruptedRepeat>(this.attach_InterruptedRepeats), new Action<InterruptedRepeat>(this.detach_InterruptedRepeats));
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			this._StudentSpecialities = new EntitySet<StudentSpeciality>(new Action<StudentSpeciality>(this.attach_StudentSpecialities), new Action<StudentSpeciality>(this.detach_StudentSpecialities));
			this._Faculty = default(EntityRef<Faculty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EGN", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string EGN
		{
			get
			{
				return this._EGN;
			}
			set
			{
				if ((this._EGN != value))
				{
					this.OnEGNChanging(value);
					this.SendPropertyChanging();
					this._EGN = value;
					this.SendPropertyChanged("EGN");
					this.OnEGNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Int NOT NULL")]
		public int Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraduateSecondarySchool", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string GraduateSecondarySchool
		{
			get
			{
				return this._GraduateSecondarySchool;
			}
			set
			{
				if ((this._GraduateSecondarySchool != value))
				{
					this.OnGraduateSecondarySchoolChanging(value);
					this.SendPropertyChanging();
					this._GraduateSecondarySchool = value;
					this.SendPropertyChanged("GraduateSecondarySchool");
					this.OnGraduateSecondarySchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEnrollmentInFirstCourse", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfEnrollmentInFirstCourse
		{
			get
			{
				return this._DateOfEnrollmentInFirstCourse;
			}
			set
			{
				if ((this._DateOfEnrollmentInFirstCourse != value))
				{
					this.OnDateOfEnrollmentInFirstCourseChanging(value);
					this.SendPropertyChanging();
					this._DateOfEnrollmentInFirstCourse = value;
					this.SendPropertyChanged("DateOfEnrollmentInFirstCourse");
					this.OnDateOfEnrollmentInFirstCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Male", DbType="Int NOT NULL")]
		public int Male
		{
			get
			{
				return this._Male;
			}
			set
			{
				if ((this._Male != value))
				{
					this.OnMaleChanging(value);
					this.SendPropertyChanging();
					this._Male = value;
					this.SendPropertyChanged("Male");
					this.OnMaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(255)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int")]
		public System.Nullable<int> FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Evaluation", Storage="_Evaluations", ThisKey="ID", OtherKey="StudentID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_InterruptedRepeat", Storage="_InterruptedRepeats", ThisKey="ID", OtherKey="StudentID")]
		public EntitySet<InterruptedRepeat> InterruptedRepeats
		{
			get
			{
				return this._InterruptedRepeats;
			}
			set
			{
				this._InterruptedRepeats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentCourse", Storage="_StudentCourses", ThisKey="ID", OtherKey="StudentsID")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentSpeciality", Storage="_StudentSpecialities", ThisKey="ID", OtherKey="StudentID")]
		public EntitySet<StudentSpeciality> StudentSpecialities
		{
			get
			{
				return this._StudentSpecialities;
			}
			set
			{
				this._StudentSpecialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Student", Storage="_Faculty", ThisKey="FacultyID", OtherKey="ID", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._FacultyID = value.ID;
					}
					else
					{
						this._FacultyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_InterruptedRepeats(InterruptedRepeat entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_InterruptedRepeats(InterruptedRepeat entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentSpecialities(StudentSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	public partial class fnStudentsFullInformationStrResult
	{
		
		private int _StudentID;
		
		private string _StudentFirstName;
		
		private string _StudentMiddleName;
		
		private string _StudentlastName;
		
		private string _EGN;
		
		public fnStudentsFullInformationStrResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this._StudentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentFirstName", DbType="NVarChar(255)")]
		public string StudentFirstName
		{
			get
			{
				return this._StudentFirstName;
			}
			set
			{
				if ((this._StudentFirstName != value))
				{
					this._StudentFirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentMiddleName", DbType="NVarChar(255)")]
		public string StudentMiddleName
		{
			get
			{
				return this._StudentMiddleName;
			}
			set
			{
				if ((this._StudentMiddleName != value))
				{
					this._StudentMiddleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentlastName", DbType="NVarChar(255)")]
		public string StudentlastName
		{
			get
			{
				return this._StudentlastName;
			}
			set
			{
				if ((this._StudentlastName != value))
				{
					this._StudentlastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EGN", DbType="NVarChar(255)")]
		public string EGN
		{
			get
			{
				return this._EGN;
			}
			set
			{
				if ((this._EGN != value))
				{
					this._EGN = value;
				}
			}
		}
	}
	
	public partial class fnStudentsFullInformationResult
	{
		
		private int _StudentID;
		
		private string _StudentFirstName;
		
		private string _StudentMiddleName;
		
		private string _StudentlastName;
		
		private string _EGN;
		
		public fnStudentsFullInformationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this._StudentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentFirstName", DbType="NVarChar(255)")]
		public string StudentFirstName
		{
			get
			{
				return this._StudentFirstName;
			}
			set
			{
				if ((this._StudentFirstName != value))
				{
					this._StudentFirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentMiddleName", DbType="NVarChar(255)")]
		public string StudentMiddleName
		{
			get
			{
				return this._StudentMiddleName;
			}
			set
			{
				if ((this._StudentMiddleName != value))
				{
					this._StudentMiddleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentlastName", DbType="NVarChar(255)")]
		public string StudentlastName
		{
			get
			{
				return this._StudentlastName;
			}
			set
			{
				if ((this._StudentlastName != value))
				{
					this._StudentlastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EGN", DbType="NVarChar(255)")]
		public string EGN
		{
			get
			{
				return this._EGN;
			}
			set
			{
				if ((this._EGN != value))
				{
					this._EGN = value;
				}
			}
		}
	}
	
	public partial class fnStudentEvaliuationResult
	{
		
		private System.Nullable<int> _Number;
		
		private string _FirstName;
		
		public fnStudentEvaliuationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this._Number = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(255)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
